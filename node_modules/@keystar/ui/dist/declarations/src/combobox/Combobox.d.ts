import { AriaButtonProps } from '@react-types/button';
import { LoadingState } from '@react-types/shared';
import React, { ForwardedRef, InputHTMLAttributes, ReactElement, RefObject } from 'react';
import { ComboboxProps } from "./types.js";
export declare function ComboboxEmptyState(props: {
    loadingState?: LoadingState;
}): React.JSX.Element;
export declare function usePopoverStyles(props: {
    menuWidth?: number;
    buttonRef: RefObject<HTMLButtonElement>;
    inputRef: RefObject<HTMLInputElement>;
    fieldRef: RefObject<HTMLDivElement>;
}): {
    width: number | undefined;
    minWidth: number | undefined;
};
export declare function useStatefulRef<T extends HTMLElement>(): readonly [{
    readonly current: T | null;
}, React.Dispatch<React.SetStateAction<T | null>>];
interface ComboboxInputProps extends ComboboxProps<unknown> {
    inputProps: InputHTMLAttributes<HTMLInputElement>;
    inputRef: RefObject<HTMLInputElement | HTMLTextAreaElement>;
    triggerProps: AriaButtonProps;
    triggerRef: RefObject<HTMLButtonElement>;
    style?: React.CSSProperties;
    isOpen?: boolean;
}
/** @private Used by multi variant. */
export declare const ComboboxInput: React.ForwardRefExoticComponent<ComboboxInputProps & React.RefAttributes<HTMLDivElement>>;
/**
 * A combobox combines a text input with a listbox, and allows users to filter a
 * list of options.
 */
declare const _Combobox: <T>(props: ComboboxProps<T> & {
    ref?: ForwardedRef<HTMLDivElement>;
}) => ReactElement;
export { _Combobox as Combobox };
